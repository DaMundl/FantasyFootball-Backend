"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var playerModel_1 = require("../models/playerModel");
require("rxjs/add/observable/fromPromise");
var PlayerApi = /** @class */ (function () {
    function PlayerApi() {
    }
    PlayerApi.create = function (router) {
        router.post('/api/Player/', function (req, res, next) {
            new PlayerApi().createNewPlayer(req, res, next);
        });
        router.get('/api/Player/', function (req, res, next) {
            new PlayerApi().getPlayerList(req, res, next);
        });
        router.delete('/api/Player/:id', function (req, res, next) {
            new PlayerApi().deletePlayer(req, res, next);
        });
        router.put('api/Player/:id', function (req, res, next) {
            new PlayerApi().findPlayerById(req, res, next);
        });
    };
    PlayerApi.prototype.createNewPlayer = function (req, res, next) {
        var player = new playerModel_1.default({
            name: req.body.name,
            position: req.body.position,
            avgPoints: req.body.avgPoints,
        });
        player.save(function (err, player) {
            if (err) {
                return res.send(err);
            }
            return res.json(player);
        });
    };
    PlayerApi.prototype.getPlayerList = function (req, res, next) {
        playerModel_1.default.find(function (err, data) {
            if (err) {
                return res.send(err);
            }
            return res.send(data);
        });
    };
    PlayerApi.prototype.findPlayerById = function (req, res, next) {
        playerModel_1.default.findById(req.params.id, function (err, player) {
            if (err) {
                return res.send(err);
            }
            if (!player) {
                return res.send("No player found!");
            }
            player.name = req.body.name;
            player.position = req.body.position;
            player.avgPoints = req.body.avgPoints;
            player.save(function (err, player) {
                if (err) {
                    return res.send(err);
                }
                return res.json(player);
            });
        });
    };
    PlayerApi.prototype.deletePlayer = function (req, res, next) {
        playerModel_1.default.remove({
            _id: req.params.id
        }, function (err) {
            if (err) {
                return res.send(err);
            }
            return res.json("deleted :()");
        });
    };
    return PlayerApi;
}());
exports.PlayerApi = PlayerApi;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFFdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFTLEdBQUcsRUFBQyxNQUFNO2dCQUMzQixJQUFHLEdBQUcsRUFBRTtvQkFDSixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3hCO2dCQUNELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1QixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLGdDQUFZLEdBQXBCLFVBQXNCLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7UUFFakUscUJBQU0sQ0FBQyxNQUFNLENBQUM7WUFDVixHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1NBQUUsRUFBRSxVQUFVLEdBQUc7WUFDL0IsSUFBRyxHQUFHLEVBQUU7Z0JBQ0osT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3hCO1lBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FDSixDQUFBO0lBQ0wsQ0FBQztJQUNMLGdCQUFDO0FBQUQsQ0FwRkEsQUFvRkMsSUFBQTtBQXBGWSw4QkFBUyIsImZpbGUiOiJhcGkvcGxheWVyQXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiwgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCBQbGF5ZXIgZnJvbSAnLi4vbW9kZWxzL3BsYXllck1vZGVsJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwicnhqcy9PYnNlcnZhYmxlXCI7XHJcbmltcG9ydCBcInJ4anMvYWRkL29ic2VydmFibGUvZnJvbVByb21pc2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQbGF5ZXJBcGkge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHJvdXRlciA6IFJvdXRlcikge1xyXG5cdFx0cm91dGVyLnBvc3QoJy9hcGkvUGxheWVyLycsIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQgOiBOZXh0RnVuY3Rpb24pID0+IHtcclxuXHRcdFx0bmV3IFBsYXllckFwaSgpLmNyZWF0ZU5ld1BsYXllcihyZXEsIHJlcywgbmV4dCk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRyb3V0ZXIuZ2V0KCcvYXBpL1BsYXllci8nLCAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0IDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcblx0XHRcdG5ldyBQbGF5ZXJBcGkoKS5nZXRQbGF5ZXJMaXN0KHJlcSwgcmVzLCBuZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICByb3V0ZXIuZGVsZXRlKCcvYXBpL1BsYXllci86aWQnLCAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0IDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBQbGF5ZXJBcGkoKS5kZWxldGVQbGF5ZXIocmVxLCByZXMsIG5leHQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByb3V0ZXIucHV0KCdhcGkvUGxheWVyLzppZCcsKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dCA6IE5leHRGdW5jdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBuZXcgUGxheWVyQXBpKCkuZmluZFBsYXllckJ5SWQocmVxLCByZXMsIG5leHQpO1xyXG4gICAgICAgIH0pO1xyXG5cdH1cclxuICAgIFxyXG4gICAgcHJpdmF0ZSBjcmVhdGVOZXdQbGF5ZXIgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XHJcblx0XHRjb25zdCBwbGF5ZXIgID0gbmV3IFBsYXllcih7XHJcblx0XHRcdG5hbWU6IHJlcS5ib2R5Lm5hbWUsXHJcblx0XHRcdHBvc2l0aW9uOiByZXEuYm9keS5wb3NpdGlvbixcclxuXHRcdFx0YXZnUG9pbnRzOiByZXEuYm9keS5hdmdQb2ludHMsXHRcdFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHBsYXllci5zYXZlKGZ1bmN0aW9uKGVycixwbGF5ZXIpe1xyXG5cclxuICAgICAgICAgICAgaWYoZXJyKSB7XHJcbiAgICAgICAgICAgICByZXR1cm5cdHJlcy5zZW5kKGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gcmVzLmpzb24ocGxheWVyKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBnZXRQbGF5ZXJMaXN0IChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xyXG5cclxuICAgICAgICBQbGF5ZXIuZmluZChmdW5jdGlvbihlcnIsZGF0YSl7XHJcblxyXG4gICAgICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgIHJldHVyblx0cmVzLnNlbmQoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc2VuZChkYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZpbmRQbGF5ZXJCeUlkIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xyXG5cclxuICAgICAgICBQbGF5ZXIuZmluZEJ5SWQocmVxLnBhcmFtcy5pZCxmdW5jdGlvbihlcnI6IGFueSwgcGxheWVyKXtcclxuXHJcbiAgICAgICAgICAgIGlmKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kKGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoIXBsYXllcilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kKFwiTm8gcGxheWVyIGZvdW5kIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIHBsYXllci5uYW1lID0gcmVxLmJvZHkubmFtZTtcclxuICAgICAgICAgICAgcGxheWVyLnBvc2l0aW9uID0gcmVxLmJvZHkucG9zaXRpb247XHJcbiAgICAgICAgICAgIHBsYXllci5hdmdQb2ludHMgPSByZXEuYm9keS5hdmdQb2ludHM7XHJcbiAgICBcclxuICAgICAgICAgICAgcGxheWVyLnNhdmUoZnVuY3Rpb24oZXJyLHBsYXllcil7XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbihwbGF5ZXIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGVsZXRlUGxheWVyIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xyXG5cclxuICAgICAgICBQbGF5ZXIucmVtb3ZlKHtcclxuICAgICAgICAgICAgX2lkOiByZXEucGFyYW1zLmlkIH0sIGZ1bmN0aW9uIChlcnIpe1xyXG4gICAgICAgICAgICAgICAgaWYoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oXCJkZWxldGVkIDooKVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgIH1cclxufSJdfQ==
